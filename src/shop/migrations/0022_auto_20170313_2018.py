# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-13 20:18
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone
import django.db.models.deletion
from django.db.models import Sum
from django.utils.timezone import timedelta
import enumfields.fields
import shop.enums
import uuid
import enum
from moneyed import Money


class TrxStatusOld(enum.Enum):
    FINALIZED = 0
    CANCELED = 1


class TrxStatus(enum.Enum):
    FINALIZED = 0
    CANCELED = 1
    PENDING = 2


class TrxType(enum.Enum):
    FINALIZED = 0
    PENDING = 1
    CANCELLATION = 2


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    transactions = apps.get_model('shop', 'producttransaction')
    status_model = apps.get_model('shop', 'producttransactionstatus')
    Product = apps.get_model('shop', 'product')

    qs = transactions.objects.all()
    products = Product.objects.all()
    pre_qty = products.aggregate(amount=models.Sum('qty'))['amount']
    products.update(qty=0)

    WalletTransaction = apps.get_model("wallet", "WalletTransaction")
    pre_balance = WalletTransaction.objects \
        .exclude(trx_type=TrxType.PENDING) \
        .aggregate(amount=Sum('amount'))['amount'] or Money(0, 'SEK')

    for trx in qs:
        # Make sure we simulate that any PENDING was created
        # before FINALIZED
        status_model.objects.create(
            date_created=(trx.date_created - timedelta(milliseconds=100)),
            trx=trx,
            status=TrxStatus.PENDING,
            reference_ct=trx.reference_ct,
            reference_id=trx.reference_id
        )

        if trx.trx_status.value == TrxStatusOld.FINALIZED.value:
            status = TrxStatus.FINALIZED
        else:
            status = TrxStatus.CANCELED

        status_model.objects.create(
            date_created=trx.date_created,
            trx=trx,
            status=status,
            reference_ct=trx.reference_ct,
            reference_id=trx.reference_id
        )

    post_qty = products.aggregate(amount=models.Sum('qty'))['amount']
    assert pre_qty == post_qty

    post_balance = WalletTransaction.objects \
        .exclude(trx_type=TrxType.PENDING) \
        .aggregate(amount=Sum('amount'))['amount'] or Money(0, 'SEK')
    # Make sure that the total balance in the system has not changed
    assert pre_balance == post_balance


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('shop', '0021_auto_20170307_1159'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductTransactionStatus',
            fields=[
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', enumfields.fields.EnumIntegerField(default=2, enum=shop.enums.TrxStatus)),
                ('reference_id', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
                ('reference_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'transaction statuses',
                'verbose_name': 'transaction status',
            },
        ),
        migrations.AlterField(
            model_name='deliveryitem',
            name='qty',
            field=models.PositiveIntegerField(verbose_name='quantity'),
        ),
        migrations.AlterField(
            model_name='product',
            name='qty',
            field=models.IntegerField(default=0, verbose_name='quantity'),
        ),
        migrations.AlterField(
            model_name='producttransaction',
            name='qty',
            field=models.IntegerField(verbose_name='quantity'),
        ),
        migrations.AlterField(
            model_name='stocktakeitem',
            name='qty',
            field=models.PositiveIntegerField(default=0, verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='producttransactionstatus',
            name='trx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='shop.ProductTransaction'),
        ),
        migrations.AlterField(
            model_name='basestocklevel',
            name='level',
            field=models.SmallIntegerField(verbose_name='Base quantity'),
        ),
        migrations.RunPython(forwards_func),
        migrations.RemoveField(
            model_name='producttransaction',
            name='reference_ct',
        ),
        migrations.RemoveField(
            model_name='producttransaction',
            name='reference_id',
        ),
        migrations.RemoveField(
            model_name='producttransaction',
            name='trx_status',
        ),
        migrations.AlterModelOptions(
            name='producttransactionstatus',
            options={'ordering': ('-date_created',), 'verbose_name': 'transaction status', 'verbose_name_plural': 'transaction statuses'},
        ),
        migrations.AlterField(
            model_name='delivery',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
        migrations.AlterField(
            model_name='product',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
        migrations.AlterField(
            model_name='producttransaction',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
        migrations.AlterField(
            model_name='producttransactionstatus',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
        migrations.AlterField(
            model_name='stocktake',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
        migrations.AlterField(
            model_name='supplierproduct',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='date created'),
        ),
    ]
